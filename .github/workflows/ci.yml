name: CI

on:
  push:
    tags:
      - 'v*'
  pull_request:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.5.3
          modules: qtbase qtmultimedia
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libmpv-dev libmpv1 cmake g++ ninja-build patchelf
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build --config Release
      - name: Test
        run: |
          ctest --test-dir build --output-on-failure
      - name: Build AppImage (bundle Qt + mpv)
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage -O linuxdeployqt
          chmod +x linuxdeployqt
          APPDIR=$(pwd)/AppDir
          mkdir -p "$APPDIR/usr/bin" "$APPDIR/usr/lib" "$APPDIR/usr/share/applications"
          cp build/TextRedactor "$APPDIR/usr/bin/" || cp build/TextRedactor "$APPDIR/usr/bin/" || true
          echo -e "[Desktop Entry]\nName=QF_Player\nExec=TextRedactor\nIcon=TextRedactor\nType=Application\nCategories=AudioVideo;" > "$APPDIR/usr/share/applications/qf_player.desktop"
          # Ensure libmpv runtime present inside image
          if [ -f /usr/lib/x86_64-linux-gnu/libmpv.so.1 ]; then cp /usr/lib/x86_64-linux-gnu/libmpv.so.1 "$APPDIR/usr/lib/"; fi
          ./linuxdeployqt "$APPDIR/usr/share/applications/qf_player.desktop" -appimage -bundle-non-qt-libs -qmake=$(which qmake) -always-overwrite
          mv *.AppImage QF_Player-linux-x86_64.AppImage
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: QF_Player-linux
          path: QF_Player-linux-x86_64.AppImage

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.5.3
          modules: qtbase qtmultimedia
      - name: Configure
        shell: bash
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        shell: bash
        run: cmake --build build --config Release
      - name: Test
        shell: bash
        run: ctest --test-dir build --output-on-failure
      - name: Deploy Qt and bundle mpv
        shell: bash
        run: |
          EXE="build/Release/TextRedactor.exe"; if [ ! -f "$EXE" ]; then EXE="build/TextRedactor.exe"; fi
          DEPLOY=$(dirname $(which qmake))/windeployqt.exe
          "${DEPLOY}" "$EXE" --release --compiler-runtime || true
          # Bundle libmpv for Windows: use repo DLL if present, otherwise download from URL
          OUTDIR="$(dirname "$EXE")"
          if [ -f mpv/libmpv-2.dll ]; then
            cp mpv/libmpv-2.dll "$OUTDIR"
          elif [ -n "${MPV_DLL_URL}" ]; then
            echo "Downloading libmpv-2.dll from MPV_DLL_URL"
            curl -L "$MPV_DLL_URL" -o libmpv.zip
            7z x libmpv.zip -olibmpv_pkg || true
            # try common paths inside package
            if compgen -G "libmpv_pkg/**/libmpv-2.dll" > /dev/null; then
              cp $(ls libmpv_pkg/**/libmpv-2.dll | head -n1) "$OUTDIR"
            elif compgen -G "libmpv_pkg/**/libmpv.dll" > /dev/null; then
              cp $(ls libmpv_pkg/**/libmpv.dll | head -n1) "$OUTDIR/libmpv-2.dll"
            else
              echo "libmpv DLL not found in downloaded package" && exit 1
            fi
          else
            echo "No libmpv provided. Set MPV_DLL_URL secret to a libmpv Windows zip URL." && exit 1
          fi
          # Bundle FFmpeg runtime DLLs if provided via FFMPEG_ZIP_URL (from mpv-winbuild releases)
          if [ -n "${FFMPEG_ZIP_URL}" ]; then
            echo "Downloading FFmpeg runtime from FFMPEG_ZIP_URL"
            curl -L "$FFMPEG_ZIP_URL" -o ffmpeg.zip
            7z x ffmpeg.zip -offmpeg_pkg || true
            # Copy common ffmpeg DLLs
            for dll in avcodec avformat avutil swresample swscale; do
              if compgen -G "ffmpeg_pkg/**/${dll}*.dll" > /dev/null; then
                cp $(ls ffmpeg_pkg/**/${dll}*.dll | head -n1) "$OUTDIR" || true
              fi
            done
          else
            echo "FFMPEG_ZIP_URL not set; assuming libmpv package already contains its dependencies."
          fi
          7z a QF_Player-windows.zip "$(dirname "$EXE")"/*
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: QF_Player-windows
          path: QF_Player-windows.zip

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/QF_Player-linux/QF_Player-linux-x86_64.AppImage
            artifacts/QF_Player-windows/QF_Player-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

